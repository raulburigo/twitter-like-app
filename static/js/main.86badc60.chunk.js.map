{"version":3,"sources":["components/ActionBtn.js","components/Tweet.js","components/lookup.js","components/TweetsList.js","components/TweetsComponent.js","App.js","serviceWorker.js","index.js"],"names":["ActionBtn","props","tweet","action","useState","likes","setLikes","userLiked","setUserLiked","className","actionDisplay","display","type","onClick","event","preventDefault","Tweet","content","loadTweets","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","send","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","console","log","newTweets","final","concat","length","alert","map","item","index","key","TweetsComponent","textAreaRef","React","createRef","setNewTweets","onSubmit","newVal","current","value","tempNewTweets","unshift","id","ref","required","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86badc60.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nfunction ActionBtn(props) {\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\r\n    const [userLiked, setUserLiked] = useState(tweet.userLiked === true ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    const display = action.type === 'like' ? `${likes} ${action.display}` : actionDisplay\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if (userLiked === true) {\r\n                setLikes(likes-1)\r\n                setUserLiked(false)\r\n            } else {\r\n            setLikes(tweet.likes+1) // http://127.0.0.1:8000/api/action\r\n            setUserLiked(true)\r\n            }\r\n        }\r\n    }\r\n    return <button className={className} onClick={handleClick}> {display} </button>\r\n}\r\n\r\nexport default ActionBtn;","import React from 'react'\r\nimport ActionBtn from './ActionBtn';\r\n\r\n\r\nfunction Tweet(props) {\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return (\r\n      <div className={className}>\r\n        <p>{tweet.content}</p>\r\n        <div className='btn btn-group'>\r\n          <ActionBtn tweet={tweet} action={{type: \"like\", display:\"Likes\"}}/>\r\n          <ActionBtn tweet={tweet} action={{type: \"retweet\", display:\"Retweet\"}}/>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Tweet;\r\n","function loadTweets(callback) {\r\n  const xhr = new XMLHttpRequest()\r\n  const method = 'GET'\r\n  const url = \"http://localhost:8000/api/tweets/\"\r\n  const responseType = \"json\"\r\n  xhr.responseType = responseType\r\n  xhr.open(method, url)\r\n  xhr.onload = function() {\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function() {\r\n    callback({\"message\": \"the request was an error\"}, 400)\r\n  } \r\n  xhr.send()    \r\n}\r\n\r\nexport default loadTweets;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Tweet from './Tweet';\r\nimport loadTweets from './lookup'\r\n\r\n\r\nfunction TweetsList(props) {\r\n\r\n  const [tweetsInit, setTweetsInit] = useState([])\r\n  const [tweets, setTweets] = useState([])\r\n\r\n  useEffect(() => {\r\n      console.log(\"new tweets :\", props.newTweets)\r\n    let final = [...props.newTweets].concat(tweetsInit)\r\n    console.log(\"final: \", final)\r\n    console.log(\"tweets: \", tweets)\r\n    if (final.length !== tweets.length) {\r\n      setTweets(final)\r\n    }\r\n  }, [props.newTweets, tweets, tweetsInit])\r\n\r\n  useEffect(() => {\r\n    const myCallback = (response, status) => {\r\n      if (status === 200) {\r\n        setTweetsInit(response)\r\n      } else {\r\n        alert(\"there was an error\")\r\n      }\r\n    }\r\n    loadTweets(myCallback)\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n        {tweets.map((item, index) => {\r\n        return <Tweet\r\n            tweet={item}\r\n            className='my-5 py-5 border bg-white text-dark'\r\n            key={`${index}-{item.id}`}\r\n        />\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetsList;\r\n","import React, {useState} from 'react'\r\nimport TweetsList from './TweetsList'\r\n\r\nfunction TweetsComponent(props) {\r\n\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 9999,\r\n        })\r\n        setNewTweets(tempNewTweets)  // isso s√≥ vai valer pra frente...\r\n        textAreaRef.current.value = ''\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <div className='col-12 mb-3'>\r\n                <form onSubmit={handleSubmit}>\r\n                    <textarea ref={textAreaRef} required={true} className='form-control' name=\"tweet\"></textarea>\r\n                    <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n                </form>\r\n            </div>\r\n            <TweetsList newTweets={newTweets}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TweetsComponent;","import React from 'react';\nimport './App.css';\nimport TweetsComponent from './components/TweetsComponent';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <TweetsComponent/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}